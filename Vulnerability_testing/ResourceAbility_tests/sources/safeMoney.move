module testing::M_safe{
    struct Money { value: u64 }

    public fun new_money(): Money {
        Money { value: 42 }
    }

    public fun increment(money: &mut Money) {
        let value = &mut money.value;
        *value = *value + 1;
    }

    public fun checkIncrement(money: &mut Money) {
        let value = &mut money.value;
        assert!(*value == 43, 101);
    }

    public fun destroy(money: Money){
        Money{value: _} = money;
    }
}

module testing::W_safe {
    use testing::M_safe;

    struct Wallet {
        money: M_safe::Money
    }

    public fun new_wallet(): Wallet {
        Wallet{money: M_safe::new_money()}
    }

    public fun f_incr(wallet: Wallet): Wallet {
        M_safe::increment(&mut wallet.money);
        wallet
    }

    public fun f_check(wallet: Wallet): Wallet {
        M_safe::checkIncrement(&mut wallet.money);
        wallet
    }

    public fun destroy(wallet: Wallet){
        let Wallet{money: m} = wallet;
        M_safe::destroy(m);
    }
}

#[test_only]
module testing::safeTest{
    use testing::W_safe;

    #[test]
    fun test_increment() {
        let w = W_safe::new_wallet();
        w = W_safe::f_incr(w);
        w = W_safe::f_check(w);
        W_safe::destroy(w);
    }
}

